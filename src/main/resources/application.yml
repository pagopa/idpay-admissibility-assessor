spring:
  application:
    name: idpay-admissibility-assessor
  config:
    activate:
      on-profile: default
  cloud:
    stream:
      function:
        definition: admissibilityProcessor;beneficiaryRuleConsumer
      bindings:
        admissibilityProcessor-in-0:
          destination: ${KAFKA_TOPIC_ONBOARDING_REQUEST:idpay-onboarding-request}
          group: ${KAFKA_IDPAY_GROUP:idPayAdmissibilityProcessor}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-onboarding-request
        admissibilityProcessor-out-0:
          destination: ${KAFKA_TOPIC_ONBOARDING_OUTCOME:idpay-onboarding-outcome}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-onboarding-outcome
        beneficiaryRuleConsumer-in-0:
          destination: ${KAFKA_TOPIC_BENEFICIARY_RULE_REQUEST:idpay-beneficiary-rule-update}
          group: ${KAFKA_IDPAY_GROUP:idPayBeneficiaryRuleConsumer}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
          binder: kafka-beneficiary-rule
      binders:
        kafka-onboarding-request:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST_ONBOARDING_REQUEST:}
                      configuration.sasl.jaas.config: ${EVH_CONNECTION_ONBOARDING_REQUEST:}
        kafka-onboarding-outcome:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST_ONBOARDING_OUTCOME:}
                      configuration.sasl.jaas.config: ${EVH_CONNECTION_ONBOARDING_OUTCOME:}
        kafka-beneficiary-rule:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST_BENEFICIARY_RULE_REQUEST:}
                      configuration.sasl.jaas.config: ${EVH_CONNECTION_BENEFICIARY_RULE_REQUEST:}
      kafka:
        binder:
          auto-create-topics: false
          configuration:
            heartbeat.interval.ms: ${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:30000}
            session.timeout.ms: ${KAFKA_CONFIG_SESSION_TIMEOUT_MS:60000}
            sasl.mechanism: ${KAFKA_CONFIG_SASL_MECHANISM:PLAIN}
            security.protocol: ${KAFKA_CONFIG_SECURITY_PROTOCOL:SASL_SSL}
          consumerProperties:
            startOffset: ${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}
            socket:
              connection:
                setup:
                  timeout:
                    max:
                      ms: ${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}
                    ms: ${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}
            connections:
              max:
                idle:
                  ms: ${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:300000}
  data:
    mongodb:
      uri: ${MONGODB_URI}
      database: ${MONGODB_DBNAME:idPay}

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    it.gov.pagopa: ${LOG_LEVEL_PAGOPA:INFO}
    it.gov.pagopa.admissibility: ${LOG_LEVEL_ADMISSIBILITY:INFO}
    org.springframework.integration: ${LOG_LEVEL_SPRING_INTEGRATION:INFO}
    org.springframework.security: ${LOG_LEVEL_SPRING_SECURITY:INFO}
    org.springframework.ws: ${LOG_LEVEL_SPRING_WS:INFO}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
    org.springframework.data: ${LOG_LEVEL_SPRING_DATA:INFO}
    org.springframework.hateoas: ${LOG_LEVEL_SPRING_HATEOAS:INFO}
    org.springframework.boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
    org.springframework.kafka: ${LOG_LEVEL_SPRING_KAFKA:INFO}
    org.springframework.batch: ${LOG_LEVEL_SPRING_BATCH:INFO}
    io.swagger: ${LOG_LEVEL_IO_SWAGGER:WARN}
    javax.persistence: ${LOG_LEVEL_JAVAX_PERSISTENCE:INFO}
    org.hibernate: ${LOG_LEVEL_ORG_HIBERNATE:INFO}
    org.kie: ${LOG_LEVEL_ORG_KIE:WARN}
    org.drools: ${LOG_LEVEL_ORG_DROOLS:WARN}
    org.mongodb.driver: ${LOG_LEVEL_MONGODB_DRIVER:WARN}

app:
  admissibility-processor:
    # if true, it will try to build each rule singularly, but this will take more time
    online-syntax-check: ${ADMISSIBILITY_PROCESSOR_BUILD_ONLINE_SYNTAX_CHECK:false}
    # the delay after which it will fetch all the rules and compile them
    build-delay-duration: ${ADMISSIBILITY_PROCESSOR_BUILD_DELAY_DURATION:PT1M} # each minute
  criteria-code-configs: # TODO using Spring cloud kubernetes?
    ISEE:
      authority: "INPS"
      onboardingField: "isee"
    BIRTHDATE:
      authority: "AGID"
      onboardingField: "birthDate"
    RESIDENZA:
      authority: "AGID"
      onboardingField: "residenza"